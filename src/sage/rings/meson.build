py.install_sources(
    'algebraic_closure_finite_field.py',
    'all.py',
    'all__sagemath_categories.py',
    'all__sagemath_objects.py',
    'big_oh.py',
    'cc.py',
    'cfinite_sequence.py',
    'cif.py',
    'commutative_algebra.py',
    'complex_interval_field.py',
    'continued_fraction.py',
    'continued_fraction_gosper.py',
    'derivation.py',
    'fraction_field.py',
    'generic.py',
    'homset.py',
    'ideal.py',
    'ideal_monoid.py',
    'imaginary_unit.py',
    'infinity.py',
    'laurent_series_ring.py',
    'lazy_series.py',
    'lazy_series_ring.py',
    'localization.py',
    'monomials.py',
    'multi_power_series_ring.py',
    'multi_power_series_ring_element.py',
    'numbers_abc.py',
    'pari_ring.py',
    'power_series_ring.py',
    'puiseux_series_ring.py',
    'qqbar.py',
    'qqbar_decorators.py',
    'quotient_ring.py',
    'quotient_ring_element.py',
    'rational_field.py',
    'real_field.py',
    'ring_extension_homset.py',
    'tate_algebra.py',
    'tests.py',
    'universal_cyclotomic_field.py',
    subdir: 'sage/rings',
)

extension_data = {
    'abc': files('abc.pyx'),
    #'bernmm': files('bernmm.pyx'), - compilation error
    #'bernoulli_mod_p': files('bernoulli_mod_p.pyx'), - compilation error
    #'complex_arb': files('complex_arb.pyx'), - needs arb
    'complex_conversion': files('complex_conversion.pyx'),
    'complex_double': files('complex_double.pyx'),
    'complex_interval': files('complex_interval.pyx'),
    'complex_mpc': files('complex_mpc.pyx'),
    'complex_mpfr': files('complex_mpfr.pyx'),
    'factorint': files('factorint.pyx'),
    'factorint_flint': files('factorint_flint.pyx'),
    'factorint_pari': files('factorint_pari.pyx'),
    'fast_arith': files('fast_arith.pyx'),
    #'fraction_field_FpT': files('fraction_field_FpT.pyx'), - needs finite rings
    'fraction_field_element': files('fraction_field_element.pyx'),
    'integer': files('integer.pyx'),
    'integer_ring': files('integer_ring.pyx'),
    'laurent_series_ring_element': files('laurent_series_ring_element.pyx'),
    'morphism': files('morphism.pyx'),
    'noncommutative_ideals': files('noncommutative_ideals.pyx'),
    'power_series_mpoly': files('power_series_mpoly.pyx'),
    'power_series_pari': files('power_series_pari.pyx'),
    'power_series_poly': files('power_series_poly.pyx'),
    'power_series_ring_element': files('power_series_ring_element.pyx'),
    'puiseux_series_ring_element': files('puiseux_series_ring_element.pyx'),
    'rational': files('rational.pyx'),
    #'real_arb': files('real_arb.pyx'), - needs arb
    'real_double': files('real_double.pyx'),
    'real_double_element_gsl': files('real_double_element_gsl.pyx'),
    'real_interval_absolute': files('real_interval_absolute.pyx'),
    'real_lazy': files('real_lazy.pyx'),
    'real_mpfi': files('real_mpfi.pyx'),
    'real_mpfr': files('real_mpfr.pyx'),
    'ring': files('ring.pyx'),
    'ring_extension': files('ring_extension.pyx'),
    'ring_extension_conversion': files('ring_extension_conversion.pyx'),
    'ring_extension_element': files('ring_extension_element.pyx'),
    'ring_extension_morphism': files('ring_extension_morphism.pyx'),
    'sum_of_squares': files('sum_of_squares.pyx'),
    'tate_algebra_element': files('tate_algebra_element.pyx'),
    'tate_algebra_ideal': files('tate_algebra_ideal.pyx'),
}

mpfi = declare_dependency(
  dependencies: [
    cc.find_library('mpfi'),
  ]
)

foreach name, pyx : extension_data
    py.extension_module(name,
        sources: pyx,
        subdir: 'sage/rings',
        install: true,
        #cython_args: ['-I', inc_gsl],
        include_directories: [inc_cpython, inc_flint, inc_gsl],
        dependencies: [py_dep, cysignals, gmpy2, cypari2, mpfi, gmp],
    )
endforeach
